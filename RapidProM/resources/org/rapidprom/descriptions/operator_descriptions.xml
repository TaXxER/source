<?xml version="1.0" encoding="windows-1252" standalone="no"?>
<operatorHelp lang="en_EN">
    <!--  This is an example how to specify the description of operators and the translation of it's key identifier
    to names. 

   <operator>
      <name>SingleTextInput</name>
      <synopsis>Generates word vectors from a single text.</synopsis>
      <help />
   </operator>
   <operator>
      <name>TextObjectWriter</name>
      <synopsis>Writes a textobject into a file.</synopsis>
      <help>This operator writes a given textObject into a file. It might be specified if an existing file with the same name should be overwritten.</help>
   </operator>

    This is how group ids are translated:
    
   <group>
      <key>text_processing</key>
      <name>Text Processing</name>
   </group>

    -->
    
    <!-- IMPORTERS -->

   <operator>
        <name>Measure Model Precision based on alignments</name>
        <synopsis></synopsis>
        <help> </help>
        <key>measure_precision</key>
   </operator>
   <operator>
   		<name>Mine a sequential model</name>
        <synopsis>DO NOT USE THIS OPERATOR (Experimental)</synopsis>
        <help> </help>
		<key>sequence_miner</key>		
	</operator>
	
	<operator>
		<name>Import CPN Model</name>
        <synopsis>Import CPN Model</synopsis>
        <help> </help>
        <key>import_cpn</key>
    </operator>
    <operator>
    	<name>Import Static Event Stream</name>
    	<synopsis>Import a static event stream</synopsis>
    	<help>Allows for importing a static event stream. Static event streams allow us to do repeated experiments using the same event stream.</help>
    	<key>import_static_event_stream</key>
    </operator>
    
    
   <operator>
    	<name>Add Source and Sink to Petri net</name>
        <synopsis>This operator creates an artificial and single source and sink places in a petri net</synopsis>
        <help> </help>
		<key>add_source_sink</key>
	</operator>
   <operator>
   		<name>ActivityList to Petri net</name>
        <synopsis>This operator creates a sequencial Petri net based on an activity name list extracted from a data table</synopsis>
        <help> </help>
		<key>name_to_petrinet</key>
	</operator>
  <operator>
  		<name>Soundness analysis (WOFLAN)</name>
        <synopsis>This operator analyzes the soundness of a petri net</synopsis>
        <help>For using this operator, you need a context and a petri net. </help>
		<key>analyze_with_woflan</key>
	</operator>
  <operator>
  		<name>Feature Prediction (Decision Trees)</name>
        <synopsis>This operator performs Predictions of Business Process Features</synopsis>
        <help>For using this operator, you need a context and a log. </help>
		<key>perform_predictions_of_business_process_features</key>
	</operator>
  <operator>
  		<name>Conformance Checking</name>
        <synopsis>This operator replays a log into a petrinet and show visual results</synopsis>
        <help>For using this operator, you need a context, a petri net and a log. </help>
		<key>replay_a_log_on_petri_net_for_conformance_analysis</key>
	</operator>
  <operator>
  		<name>Inductive Visual Miner</name>
        <synopsis>This operator creates a process model using the Inductive Visual Miner</synopsis>
        <help>For using this operator, you need a context and a log. </help>
		<key>mine_with_inductive_visual_miner</key>
	</operator>
  <operator>
  		<name>Visualize Model using PomPom (visualization)</name>
        <synopsis>This operator shows a PomPom view over a PetriNet</synopsis>
        <help>For using this operator, you need a context, a petri net and a log. </help>
		<key>show_pompom_view</key>
	</operator>
  <operator>
  		<name>Discover Process Data Flow (Decision Tree)</name>
        <synopsis>This operator transforms a Petri net into a Desicion tree</synopsis>
        <help>For using this operator, you need a context, a petri net and a log. </help>
		<key>discovery_of_the_process_data-flow_(decision-tree_miner)</key>
	</operator>
  <operator>
  		<name>Petri Net to BPMN</name>
        <synopsis>This operator transforms a Petri net into a BPMN diagram</synopsis>
        <help>For using this operator, you need a context and a petri net. </help>
		<key>convert_petrinet_to_bpmn</key>
	</operator>
	<operator>
		<name>Petri Nets to Petri Net List</name>
		<synopsis>This operator transforms a number of Petri nets to a list containing them</synopsis>
		<help></help>
		<key>convert_petri_nets_to_petri_net_list</key>
	</operator>	
  <operator>
  		<name>Transition System to Petri Net </name>
        <synopsis>This operator transforms a Transition System (Reachability Graph) into a petri net</synopsis>
        <help>For using this operator, you need a context and a transition system (reachability graph). </help>
		<key>transition_system_to_petrinet</key>
	</operator>
  <operator>
  		<name>Petri Net to Reachability Graph</name>
        <synopsis>This operator transforms a petri net into a Transition System (Reachability Graph)</synopsis>
        <help>For using this operator, you need a context, a petri net and an initial marking set. </help>
		<key>construct_reachability_graph_of_a_petri_net</key>
	</operator>
    
    <operator>
        <name>Import Accepting Petri Net</name>
        <synopsis>Import an Accepting Petri Net</synopsis>
        <help />
        <key>import_accepting_petri_net</key>
    </operator>
    
  <operator>
  		<name>Import Petri Net</name>
        <synopsis>This operator is used to import a Petri net</synopsis>
        <help> </help>
		<key>import_petri_net</key>
	</operator>
  <operator>
  		<name>Animate Log in Fuzzy Model</name>
        <synopsis>This operator is used to animate (replay) an event log into a selected fuzzy instance</synopsis>
        <help>For using this operator, a context, an event log, and a Fuzzy Instance (MutableFuzzyGraph object) are necessary as inputs. </help>
		<key>animate_event_log_in_fuzzy_instance</key>
	</operator>
  <operator>
  		<name>Select Fuzzy Instance</name>
        <synopsis>This operator is used to select the best fuzzy instance for the Fuzzy Animation</synopsis>
        <help>For using this operator, a context and a Fuzzy Model (MetricsRepository object) are necessary as inputs. </help>
		<key>select_best_fuzzy_instance</key>
	</operator>  
   <operator>
        <name>Import Event Log</name>
        <synopsis>This operator can be used to import a ProM XES event log from a file.</synopsis>
        <help>This operator can be used to import a ProM XES event log file. 
        Note that only .xes files can be read.</help>
    <key>import_xlog</key>
  </operator>
  
  <operator>
        <name>Extract Event Log</name>
        <synopsis>This operator can be used to read a ProM XES log file from a file object (useful for loops over file collections)</synopsis>
        <help>This operator can be used to read a ProM XES log file</help>
    <key>extract_log_from_file</key>
  </operator>
  
  <operator>
        <name>Read PNML</name>
        <synopsis>This operator can be used to read a PNML file.</synopsis>
        <help>This operator can be used to read a PNML file. PNML files that are accepted are the ones that are produced by ProM itself or the ones that are produced by Yasper. As input a ProM context and a pnml file is needed.</help>
    <key>read_pnml_file</key>
  </operator>
  
  <operator>
        <name>ProM Context</name>
        <synopsis>This operator provides a ProM context.</synopsis>
        <help>This operator provides a ProM context. In order to run most of the ProM operators a ProM context is needed. When the operator is executed an instance of ProM is started. This instance can be reused  for multiple operators that require such a ProM context.</help>
    <key>prom_context</key>
  </operator>
  <operator>
        <name>Sort chronologically</name>
        <synopsis>This operator sorts traces and events within traces by timestamp (increasing).</synopsis>
        <help>This operator sorts traces and events within traces by timestamp.</help>
    <key>timestamp_sort</key>
  </operator>
  
   <operator>
        <name>Alpha Miner (Petri Net)</name>
        <synopsis>This operator can be used to execute the Alpha algorithm.</synopsis>
        <help>This operator can be used to execute the Alpha algorithm which provides a Petri Net and a Marking. As input a ProM context and a log file is needed.</help>
    <key>alpha_miner</key>
  </operator>

   <operator>
        <name>Guide Tree Miner (Process Tree)</name>
        <synopsis>This operator can be used to execute the Guide Tree Miner algorithm.</synopsis>
        <help>This operator can be used to execute the Guide Tree Miner algorithm which provides a Guide Tree and a selection of sublogs. As input a ProM context and a log file is needed.</help>
    <key>guide_tree_miner</key>
  </operator>
  
  <operator>
        <name>Passage Miner (Petri Net)</name>
        <synopsis>This operator can be used to execute the Passage Miner discovery algorithm.</synopsis>
        <help>This operator can be used to execute the Passage Miner algorithm which provides a Petri Net. As input a ProM context and a log file is needed.</help>
    <key>passage_miner</key>
  </operator>
  
  <operator>
        <name>ILP Miner (Petri Net)</name>
        <synopsis>This operator can be used to execute the ILP Miner discovery algorithm.</synopsis>
        <help>This operator can be used to execute the ILP Miner algorithm which provides a Petri Net and a marking. As input a ProM context and a log file is needed.</help>
    <key>ilp_miner</key>
  </operator>
  
  <operator>
        <name>Genetic Miner (Heuristics Net)</name>
        <synopsis>This operator can be used to execute the Genetic Miner discovery algorithm.</synopsis>
        <help>This operator can be used to execute the Genetic Miner algorithm which provides a Heuristics Net. As input a ProM context and a log file is needed.</help>
    <key>genetic_miner</key>
  </operator>
 
	<operator>
        <name>Repair Model (Petri Net)</name>
        <synopsis>This operator can be used to execute the repaid model algorithm.</synopsis>
        <help>This operator can be used to execute the repair model algorithm which provides a Petri Net. As input a ProM context, a log file, and a Petri Net is needed.</help>
    <key>repair_model</key>
  </operator>
  
	<operator>
        <name>Reduce Silent Transitions (Petri Net)</name>
        <synopsis>This operator can be used to execute the reduce silent transitions algorithm.</synopsis>
        <help>This operator can be used to execute the reduce silent transitions algorithm which provides a Petri Net and a marking. As input a ProM context, a Petri Net, and a marking is needed.</help>
    <key>reduce_silent_transitions</key>
  </operator>
  
	<operator>
        <name>Export Petri net</name>
        <synopsis>This operator can be used to export a Petri Net to a (E)PNML file.</synopsis>
        <help>This operator can be used to export a Petri Net to a (E)PNML file. As Petri Net is needed as an input.</help>
    <key>export_petri_net</key>
  </operator>  
	<operator>
		<name>Export Event Log</name>
		<synopsis>This operator can be used to export an event log.</synopsis>
        <help>This operator can be used to export a event log. As log format XES, XES.GZ, MXML, and MXML.GZ are available. As input this operator needs an event log.</help>
		<key>export_log</key>
	</operator> 
	<operator>
		<name>Export Static Event Stream</name>
		<synopsis>This operator can be used to export a static event stream.</synopsis>
		<help></help>
		<key>export_static_event_stream</key>
	</operator>
	<operator>
        <name>Event Log to Data Table (Exampleset)</name>
        <synopsis>This operator can be used to convert a ProM log into an Exampleset (data table).</synopsis>
        <help>This operator can be used to convert a ProM log into an Exampleset. As input a log is needed. Each event of the log is converted into a single row in the Exampleset. Trace attributes are repeated in each row that is created for an event of that trace.</help>
    <key>xlog_to_exampleset</key>
  </operator>
  
	<operator>
        <name>Data Table to Event Log (XLog)</name>
        <synopsis>This operator can be used to convert an Exampleset (data table) into an ProM log.</synopsis>
        <help>This operator can be used to convert an Exampleset into an ProM log. As input an Exampleset is needed. Each row of the exampleset is converted into a event belonging to a trace. For the conversion it is important that the following columns exist: T:concept:name (the concept name attribute of the trace), E:concept:name (the concept name attribute of the event), E:lifecycle:transition (the life cycle attribute of the event), E:org:resource (the resource attribute of the event), E:org:role (the role attribute of the event), E:org:group (the group attribute of the event), and E:time:time (the time attribute of the event).</help>
    <key>exampleset_to_xlog</key>
  </operator>
  
	<operator>
        <name>Log Collection to Log Array</name>
        <synopsis>This operator can be used to convert a collection of logs into an event log array.</synopsis>
        <help>This operator can be used to convert a collection of logs into an event log array. As one of the inputs a ProM context is needed. Furthermore, each log that needs to be added to the resultant event log array needs to be connected to a separate input port.</help>
    <key>logs_to_event_log_array</key>
  </operator>
  
	<operator>
        <name>Heuristics Net to Petri Net</name>
        <synopsis>This operator can be used to convert a Heuristics Net into a Petri Net.</synopsis>
        <help>This operator can be used to convert a Heuristics Net into a Petri Net and a marking. As input a ProM context and a Heuristics Net is needed.</help>
    <key>convert_heuristics_net_into_petri_net</key>
  </operator>
  
	<operator>
        <name>Causal Activity Graph to Activity Cluster Array</name>
        <synopsis>This operator can be used to convert a causal activity graph to an activity array.</synopsis>
        <help>This operator can be used to convert a causal activity graph to an activity array. As input a ProM context and a Causal Activity Graph is needed.</help>
    <key>convert_causal_activity_graph_to_activity_cluster_array</key>
  </operator>
  
	<operator>
        <name>Causal Activity Matrix to Causal Activity Graph</name>
        <synopsis>This operator can be used to convert a causal activity matrix to a causal activity graph.</synopsis>
        <help>This operator can be used to convert a causal activity matrix to a causal activity graph. As input a ProM context and a Causal Activity Matrix is needed.</help>
    <key>convert_causal_activity_matrix_to_causal_activity_graph</key>
  </operator>

	<operator>
        <name>Petri Net to Accepting Petri Net</name>
        <synopsis>This operator can be used to convert a Petri Net into an Accepting Petri Net.</synopsis>
        <help>This operator can be used to convert a Petri Net into an Accepting Petri Net. As input a ProM context and a Petri Net is needed.</help>
    <key>convert_petrinet_to_accepting_petrinet</key>
  </operator>
  
	<operator>
        <name>Accepting Petri Net to Activity Cluster Array</name>
        <synopsis>This operator can be used to decompose an Accepting Petri Net using an Activity Cluster Array.</synopsis>
        <help>This operator can be used to decompose an Accepting Petri Net using an Activity Cluster Array. As input a ProM context and a Accepting Petri Net is needed.</help>
    <key>decompose_accepting_petrinet_using_activity_cluster_array</key>
  </operator>
  
	<operator>
        <name>Log to Activity Cluster Array</name>
        <synopsis>This operator can be used to decompose an Event Log using an Activity Cluster Array.</synopsis>
        <help>This operator can be used to decompose an Event Log using an Activity Cluster Array. As input a ProM context and a log is needed.</help>
    <key>decompose_event_log_using_activity_cluster_array</key>
  </operator>
  
	<operator>
        <name>Log Array to Accepting Petri Net Array</name>
        <synopsis>This operator can be used to discover an Accepting Petri Net Array from an Event Log Array.</synopsis>
        <help>This operator can be used to discover an Accepting Petri Net Array from an Event Log Array. As input a ProM context and a Event Log Array is needed.</help>
    <key>discover_accepting_petrinet_array_from_event_log_array</key>
  </operator>
  
	<operator>
        <name>Accepting Petri Net Array to Activity Cluster Array</name>
        <synopsis>This operator can be used to extract an Activity Cluster Array from an Accepting Petri Net Array.</synopsis>
        <help>This operator can be used to extract an Activity Cluster Array from an Accepting Petri Net Array. As input a ProM context and a Accepting Petri Net Array is needed.</help>
    <key>extract_activity_cluster_array_from_accepting_petrinet_array</key>
  </operator>
  
	<operator>
        <name>Accepting Petri Net Array to Accepting Petri Net</name>
        <synopsis>This operator can be used to merge an Accepting Petri Net array into an Accepting Petri Net.</synopsis>
        <help>This operator can be used to merge an Accepting Petri Net array into an Accepting Petri Net. As input a ProM context and a Accepting Petri Net is needed.</help>
    <key>merge_accepting_petrinet_array_into_accepting_petrinet</key>
  </operator>
  
	<operator>
        <name>Log to Causal Activity Matrix</name>
        <synopsis>This operator can be used to mine a Causal Activity Matrix into an Event Log.</synopsis>
        <help>This operator can be used to mine a Causal Activity Matrix from an Event Log. As input a ProM context and an Event Log is needed.</help>
    <key>mine_causal_activity_matrix_from_event_log</key>
  </operator>
  
	<operator>
        <name>Replay Log Array on Accepting Petri Net Array</name>
        <synopsis>This operator can be used to replay an Event Log Array on an Accepting Petri Net Array.</synopsis>
        <help>This operator can be used to replay an Event Log Array on an Accepting Petri Net Array. As input a ProM context, an Event Log Array, and an Accepting Petri Net Array is needed.</help>
    <key>replay_event_log_array_on_accepting_petrinet_array</key>
  </operator>
  
  	<operator>
        <name>Log Array to Logm Collection</name>
        <synopsis>This operator can be used to convert an event log array into a collection of logs.</synopsis>
        <help>This operator can be used to convert an event log array into a collection of logs. As input an Event Log Array is needed.</help>
    <key>convert_event_log_array_into_collection_of_logs</key>
  </operator>

	<operator>
        <name>Accepting Petri Nets Collection to Accepting Petri Net Array</name>
        <synopsis>This operator can be used to convert a collection of accepting petri nets into an accepting petri net array.</synopsis>
        <help>This operator can be used to convert a collection of accepting petri nets into an accepting petri net array. As input an collection of accepting petri nets is needed.</help>
    <key>convert_collection_of_logs_into_accepting_petri_net_array</key>
  </operator>
  
  	<operator>
        <name>Log to Log Array</name>
        <synopsis>This operator can be used to convert a log into an event log array.</synopsis>
        <help>This operator can be used to convert a log into an event log array. As input a log is needed.</help>
    <key>convert_log_into_event_log_array</key>
  </operator>
  
   	<operator>
        <name>Accepting Petri Net Array to Accepting Petri Net</name>
        <synopsis>This operator can be used to convert an accepting petrinet array into an accepting petri net.</synopsis>
        <help>This operator can be used to convert an accepting petrinet array into an accepting petri net. As input an accepting petri net array is needed.</help>
    <key>convert_accepting_petri_net_array_into_accepting_petri_net</key>
  </operator>
  
    <operator>
        <name>Collection Iteration Parallel</name>
        <synopsis>The Collection Iteration Operator but now in parallel.</synopsis>
        <help>The Collection Iteration Operator but now in parallel.</help>
    <key>collection_iteration_parallel</key>
  </operator>
  
    <operator>
        <name>Collection Iteration Parallel2</name>
        <synopsis>The Collection Iteration Operator but now in parallel.</synopsis>
        <help>The Collection Iteration Operator but now in parallel.</help>
    <key>collection_iteration_parallel2</key>
  </operator>
  
      <operator>
        <name>Split Log</name>
        <synopsis>An XLog is split into multiple sublogs.</synopsis>
        <help>An XLog is split into multiple sublogs. The number of sublogs can be defined and the seed can be defined in order to spread the traces over the sublogs.</help>
    <key>log_random_split</key>
  </operator>
  
       <operator>
        <name>Evolutionary Tree Miner (Process Tree)</name>
        <synopsis>Mine a Process Using the ETM Algorithm.</synopsis>
        <help>Mine a Process Using the ETM Algorithm.</help>
    	<key>etm_miner</key>
  	  </operator>
  	  
  	  <operator>
        <name>Process Tree to Petri Net</name>
        <synopsis>Convert a Process Tree into a Petri Net.</synopsis>
        <help>Convert a Process Tree into a Petri Net.</help>
    	<key>convert_process_tree_to_petri_net</key>
  	  </operator>
  	  
  	  <operator>
        <name>Duplicate Log</name>
        <synopsis>A Log can be duplicated multiple times.</synopsis>
        <help>Duplicates a log.</help>
    	<key>duplicate_log</key>
  	  </operator>
  	  
  	  <operator>
        <name>Replications</name>
        <synopsis>Replications.</synopsis>
        <help>Replications.</help>
    	<key>replications</key>
  	  </operator>
  	  
  	  <operator>
        <name>Analyze Performance (Manifest) </name>
        <synopsis>A log is replayed on a petri net to get performance and conformance information.</synopsis>
        <help>A log is replayed on a petri net to get performance and conformance information.</help>
    	<key>replay_a_log_on_petri_net_for_performance_conformance_analysis</key>
  	  </operator>
  	  
  	  <operator>
        <name>Dotted Chart (Visualization)</name>
        <synopsis>A log is visualised using a dotted chart.</synopsis>
        <help>A log is visualised using a dotted chart.</help>
    	<key>dotted_chart_analysis</key>
  	  </operator>
  	  
  	   <operator>
        <name>Heuristics Miner (Heuristics Net)</name>
        <synopsis>This operator can be used to execute the Heuristics Miner algorithm.</synopsis>
        <help>This operator can be used to execute the Heuristics Miner algorithm (defined in http://dx.doi.org/10.1109/CIDM.2011.5949453) which provides a Heuristics Net. As input a ProM context and a log file is needed.</help>
    	<key>heuristics_miner</key>
  	   </operator>
  	   
  	   <operator>
        <name>Inductive Miner (Petri Net)</name>
        <synopsis>This operator can be used to execute the Inductive Miner in order to discover a Petri Net.</synopsis>
        <help>This operator can be used to execute the Inductive Miner algorithm which provides a Petri Net. As input a ProM context and a log file is needed.</help>
    	<key>mine_petri_net_with_inductive_miner</key>
  		</operator>
  		
  		<operator>
        <name>Inductive Miner (Process Tree)</name>
        <synopsis>This operator can be used to execute the Inductive Miner in order to discover a Process Tree.</synopsis>
        <help>This operator can be used to execute the Inductive Miner algorithm which provides a Process Tree. As input a ProM context and a log file is needed.</help>
    	<key>mine_process_tree_with_inductive_miner</key>
  		</operator>
  
  	<operator>
        <name>Social Network Miner (Social Network)</name>
        <synopsis>This plugin reads an event log and generates social networks that can be used as a starting point for SNA. We can apply several techniques to analyze the social networks, e.g., find interaction patterns, evaluate the role of an individual in an organization, etc.</synopsis>
        <help>An event log is requires as input</help>
    <key>social_network_miner</key>
  </operator>
  	<operator>
        <name>Add Noise</name>
        <synopsis>This filter randomly adds noise to the log.</synopsis>
        <help>This operator can be used to add noise to a log. There are 5 possible noise types: remove head, remove body, swap tasks, remove task, and add task. The noise types remove head and remove body respectively remove at most the first or second 1/3 of a trace. The noise type swap randomly swaps two event in a trace. The noise type remove randomly removes event from a trace. The add type randomly adds an event to a trace. As input a log file is needed.</help>
    	<key>add_noise_log</key>
  	</operator>
  	
  	<operator>
        <name>Add Table Column to XLog</name>
        <synopsis>This operator adds a column of an example set to an XLog.</synopsis>
        <help>This operator adds a column of an example set to an XLog. As input a log file and an example set is needed.</help>
    	<key>add_table_column_to_log</key>
  	</operator>
  	
  	<operator>
        <name>Log to Log Array using Trace Attribute</name>
        <synopsis>This operator splits a log into an event log array based on different values for a trace attribute.</synopsis>
        <help>This operator splits a log into an event log array based on different values for a trace attribute. As input a log file is needed.</help>
    	<key>create_event_log_array_based_on_trace_attribute</key>
  	</operator>
  	
  	<operator>
        <name>Add Trace Attributes to Log</name>
        <synopsis>This operator adds trace attributes to a log.</synopsis>
        <help>This operator adds trace attributes (that are contained in an exampleset) to a log. For each trace only one row in the exampleset exists. In the exampleset one row needs to contain the (unique) case identifiers of the traces. As input a log file and an exampleset is needed.</help>
    	<key>add_trace_attributes_to_log</key>
  	</operator>
  	
  	<operator>
        <name>Add Event Attributes to Log</name>
        <synopsis>This operator adds event attributes to a log.</synopsis>
        <help>This operator adds event attributes (that are contained in an exampleset) to a log. For each event only one row in the exampleset exists. In the exampleset one column needs to contain the case identifiers of the traces and another column needs to contain the (unique) event identifiers. As input a log file and an exampleset is needed.</help>
    	<key>add_event_attributes_to_log</key>
  	</operator>
  	
  	 <operator>
        <name>Add Events to Log</name>
        <synopsis>This operator adds events to a log.</synopsis>
        <help>This operator adds events (that are contained in an exampleset) to a log. For each event only one row in the exampleset exists. In the exampleset, separate columns need to contain the following information: case identifiers, concept:name of the events, lifecycle:transition of the events, time:timestamp of the events, org:resource of the events, org:role of the events, group:resource of the events. In case a column with information is not present, no value needs to be filled in. As input a log file and an exampleset is needed.</help>
    	<key>add_events_to_log</key>
  	</operator>
  	
  	 <operator>
        <name>Merge Event Logs</name>
        <synopsis>This operator merges two event logs.</synopsis>
        <help>This operator merges two event logs. As input two logs are needed.</help>
    	<key>merge_two_event_logs</key>
  	</operator>
  	
  	<operator>
  		<name>Add Classifier to Event Log</name>
        <synopsis>This operator adds an event classifier to an event log. An event classifier defines how events are identified.</synopsis>
        <help>An event log is needed as input.</help>
        <key>add_classifier_log</key>                
    </operator> 
  	
  	 <operator>
        <name>Add Artificial Start and End Event</name>
        <synopsis>This operator adds a start and end event to each trace.</synopsis>
        <help>This operator adds a start and end event to each trace. As input a log is needed.</help>
    	<key>add_artificial_start_end_event_filter</key>
  	</operator>
  	
  	<operator>
        <name>Transition System Miner (Transition System)</name>
        <synopsis>This operator mines a transition system based on the selected parameters, as defined in (http://dx.doi.org/10.1016/j.is.2010.09.001)</synopsis>
        <help>A log is required as input</help>
    	<key>mine_transition_system</key>
  	</operator>
	
	<operator>
        <name>Fuzzy Miner (Fuzzy Model)</name>
        <synopsis>This operator mines a fuzzy model as described in (http://dx.doi.org/10.6100/IR644335). This miner is best suited for flexible or unstructured processes, where other miners give very complex models as result.</synopsis>
        <help>A log is required for input</help>
    	<key>mine_fuzzy_model</key>
  	</operator>
  	
  	<!-- STREAMS -->
    <operator>
        <name>Generate Event Stream from CPN</name>
        <synopsis>Generate stream from CPN</synopsis>
        <help></help>
        <key>stream_from_cpn</key>
    </operator>
    <operator>
        <name>Generate Event Stream from Static Event Stream</name>
        <synopsis>Generate an event stream from a static event stream.</synopsis>
        <help></help>
        <key>stream_from_static_event_stream</key>
    </operator>
    <operator>
        <name>Stream Inductive Miner (Accepting Petri Net)</name>
        <synopsis>Discover a Petri net from an event stream using a stream-based implementation of the inductive miner</synopsis>
        <help />
        <key>stream_inductive_miner_apn</key>
	</operator>
	<operator>
        <name>Stream Inductive Miner (Process Tree)</name>
        <synopsis>Discover a Petri net from an event stream using a stream-based implementation of the inductive miner</synopsis>
        <help />
        <key>stream_inductive_miner_pt</key>
    </operator>
    <operator>
        <name> Event Stream Algorithm Analyzer (Projected Recall Precision, Accepting Petri Net)</name>
        <synopsis>Calculates Model to Model similarity of each generated model of each connected algorithm at each point in time to a collection of reference models</synopsis>
        <help />
        <key>event_stream_analysis_proj_rec_prec_apn</key>
	</operator>
	<operator>
		<name> Extract Static Event Stream </name>
		<synopsis> This operator allows for extracting a static event stream from a live event stream.</synopsis>
		<help> This operator allows for extracting a static event stream from a live event stream. The static event stream can be used repeatedly (i.e. for repeated experiments). The user needs to specify how many packets should be captured by the extractor. The primary input is an (inactive) event stream. As a secondary, optional, input an author object can be given. If the author is not started yet the operator will start the underlying author.</help>
	    <key>extract_static_event_stream_from_event_stream</key>
	</operator>
</operatorHelp>